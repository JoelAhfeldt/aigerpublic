class Parser:
    def __init__(self,file):
        self.fin = file
        self.fout = open(self.fin.name+".hll","w")
        self.M = 0
        self.I = 0
        self.L = 0
        self.O = 0
        self.A = 0
        self.B = 0
        self.C = 0
        self.J = 0
        self.F = 0
        self.translation = ["a","b","c","d","e","f","g","h"]
        self.input = []
        self.output = []
        self.ands = []
        self.latch = []
        self.invconstraint = []
        self.badstate = []
        self.charnr = 0
        self.linenr = 1
        self.prev = ""

    def nexterino(self):
        char = self.fin.read(1)
        return char

    def parseHead(self):
        if self.nexterino() != "a" or self.nexterino() != "a" or self.nexterino() != "g" or self.nexterino() != " ":
            print("expected aag in header")
        print(self.parseInt(" "))
        #self.M = int(self.parseInt(" "))
        self.I = int(self.parseInt(" "))
        self.L = int(self.parseInt(" "))
        self.O = int(self.parseInt(" "))
        self.A = int(self.parseInt(" "))
        self.B = int(self.parseInt(" "))
        self.C = int(self.parseInt(" "))
        self.J = int(self.parseInt(" "))
        self.F = int(self.parseInt("\n"))

    def parseInt(self, expected): #Excpected char after the integer
        numb = self.nexterino()

        char=self.nexterino()
        while char < 9 and char > 0:
            numb=10*numb+char
            char=self.nexterino()

        if char != expected:
            print("expected "+ expected+char)
        return numb

    def parseInput(self):
        for i in range(0,self.I,1):
            self.input.append(self.parseInt("\n"))
        for x in self.input:
            print(x)


    def parseLatch(self):
        for i in range(0,self.L,1):
            current=self.parseInt(" ")
            nextstate=self.parseInt(" ")
            initial=self.parseInt("\n")
            self.latch.append([current,nextstate,initial])


    def translateLit(self,lit):
        trans=""
        if (lit % 2) == 0:
            for i in lit:
                trans=trans+self.translation(i)
        else:
            lit=lit-1
            trans=trans+"~"
            for i in lit:
                trans = trans+self.translation(i)


    def parseOutput(self):
        for i in range(0,self.O,1):
            self.output.append(self.parseInt("\n"))


    def parseAnd(self):
        if self.A>0:
            for i in range(0,self.A,1):
                result = self.parseInt(" ")
                ls = self.parseInt(" ")
                rs = self.parseInt("\n")
                self.ands.append([result,ls,rs])

    def parseInvariant(self):
        for i in range(0,self.C,1):
            self.invconstraint.append(self.parseInt("\n"))

    def parseBadstate(self):
        for i in range(0,self.B,1):
            self.badstate.append(self.parseInt("\n"))





    def writeInput(self):
        self.fout.write("input:\n")
        for i in self.input:
            self.fout.write("bool "+i+";\n")

    def writeDeclarations(self):
        self.fout.write("declatations:\n")
        for i in self.ands:
            self.fout.write("bool "+i[0]+";\n")
        for i in self.latch:
            self.fout.write("bool "+i[0]+"\n")


    def writeDefinitions(self):
        self.fout.write("Definitions:\n")
        for i in self.ands:
            self.fout.write(i[0]+" := "+i[1]+" & "+i[2]+";\n")
        for i in self.latch:
            if i[2] == 1:
                self.fout.write(i[0]+":= true, "+i[1])
            elif i[2] == 0:
                self.fout.write(i[0] + ":= false, " + i[1])
            elif i[3] == i[1]:
                self.fout.write(i[0] + ":= Nil, " + i[1])



    def writeOutputs(self):
        self.fout.write("Outputs:\n")
        for i in self.output:
            self.fout.write(i+";\n")


    def writeProofObl(self):
        self.fout.write("Proof Obligations:\n")
        for i in self.invconstraint:
            self.fout.write(i+"\n")
        for i in self.badstate:
            self.fout.write("~"+i+"\n")





def main():
    f=open("test.aag")
    parser=Parser(f)
    parser.parseHead()
    parser.parseInput()
    parser.parseLatch()
    parser.parseOutput()
    parser.parseBadstate()
    parser.parseInvariant()
    parser.parseAnd()
    parser.writeInput()
    parser.writeDeclarations()
    parser.writeDefinitions()
    parser.writeOutputs()
    parser.writeProofObl()


main()
